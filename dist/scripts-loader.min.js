/*!
 * Scripts-Loader JavaScript Library v1.0.0
 * https://github.com/Mubarrat/scripts-loader/
 * 
 * Released under the MIT license
 * https://github.com/Mubarrat/scripts-loader/blob/main/LICENSE
 */
"use strict";function detectFormatXmlOrJson(e){switch(e.trim().charAt(0)){case"<":try{return(new DOMParser).parseFromString(e,"text/xml"),"xml"}catch(e){return""}case"{":case"}":try{return JSON.parse(e),"json"}catch(e){return""}default:return""}}function loadScript(e,r){switch(r){case"document":for(const r of e)if(0!==r.sources.length)if(r.dependencies.length>0){const s=(new Array).concat(...r.dependencies.map((r=>{const t=e.find((e=>e.name===r));return t?t.promises:Promise.resolve()})));Promise.all(r.promises=r.promises.concat(...s)).then((e=>t([...r.sources])),console.error).catch(console.error)}else r.promises=r.promises.concat(t([...r.sources]));break;case"ajax":for(const r of e)if(0!==r.sources.length)if(r.dependencies.length>0){const t=(new Array).concat(...r.dependencies.map((r=>{const t=e.find((e=>e.name===r));return t?t.promises:Promise.resolve()})));Promise.all(r.promises=r.promises.concat(...t)).then((e=>s([...r.sources])),console.error).catch(console.error)}else r.promises=r.promises.concat(s([...r.sources]));break;default:throw new Error('`renderer` is either be "document" or "ajax"')}function t(e){return new Promise(((r,s)=>{if(0===e.length)return void s("All sources failed.");const n=document.createElement("script");n.type="text/javascript",n.src=e.shift(),n.onload=()=>r(),n.onerror=()=>t(e).then(r).catch(s),document.head.appendChild(n)}))}function s(e){return new Promise(((r,s)=>{if(0===e.length)return void s("All sources failed.");const n=new XMLHttpRequest;n.open("GET",e.shift()),n.onreadystatechange=function(){n.readyState===XMLHttpRequest.DONE&&(200===n.status?(new Function(n.responseText)(),r()):t(e).then(r).catch(s))},n.send()}))}}class ScriptArray extends Array{constructor(...e){if(!Array.isArray(e))throw new Error("`array` isn't array");if(!e.every((e=>e instanceof ScriptObject)))throw new Error("Every item of `array` isn't an instance of ScriptObject");super(...e)}add(e){return this.push(e)}get names(){return this.map((e=>e.name))}}class ScriptObject{constructor(){this.name="",this.sources=[],this.dependencies=[],this.promises=[]}}const $ls=Object.assign((e=>$ls[detectFormatXmlOrJson(e)](e)),{xml:Object.assign((e=>$ls.xml.document(e)),{document(e){loadScript(validateXmlAsScriptArray(e),"document")},ajax(e){loadScript(validateXmlAsScriptArray(e),"ajax")}}),json:Object.assign((e=>$ls.xml.document(e)),{document(e){loadScript(validateJsonAsScriptArray(e),"document")},ajax(e){loadScript(validateJsonAsScriptArray(e),"ajax")}}),""(){throw new Error("Unknown type")}});function validateAsScriptArray(e){if(!Array.isArray(e))throw new Error("Root element should be an array");return new ScriptArray(...e.map((e=>{if("object"!=typeof e||Array.isArray(e))throw new Error("Items should be objects");const r=Object.keys(e).length;if(r<1||r>3)throw new Error("Items should have from 1 to 3 attributes");const{name:t,source:s,sources:n,dependency:o,dependencies:a}=e;if(!s&&!n)throw new Error("Attributes source(s) are required");if(s&&n)throw new Error("source and sources both are defined");return Object.assign(new ScriptObject,{name:t||"",sources:n||(s?[n]:[]),dependencies:a||(o?[o]:[])})})))}function validateJsonAsScriptArray(e){if("string"!=typeof e)throw new Error("`data` isn't string");return validateAsScriptArray(JSON.parse(e))}function validateXmlAsScriptArray(e){const r=(new DOMParser).parseFromString(e,"text/xml"),t="http://schemas.mubarrat.com/scripts-loader/";return validateAsScriptArray([...r.getElementsByTagNameNS(t,"script")].map((e=>({name:e.getAttribute("name"),sources:[...e.getElementsByTagNameNS(t,"source")].map((e=>e.textContent)),dependencies:[...e.getElementsByTagNameNS(t,"dependency")].map((e=>e.textContent))}))))}
//# sourceMappingURL=scripts-loader.js.map