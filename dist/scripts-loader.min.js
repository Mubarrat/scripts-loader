/*!
 * Scripts-Loader JavaScript Library v1.0.4
 * https://github.com/Mubarrat/scripts-loader/
 * 
 * Released under the MIT license
 * https://github.com/Mubarrat/scripts-loader/blob/main/LICENSE
 */
"use strict";function detectFormatXmlOrJson(r){switch(r.trim().charAt(0)){case"<":try{return(new DOMParser).parseFromString(r,"text/xml"),"xml"}catch(r){return""}case"{":case"}":try{return JSON.parse(r),"json"}catch(r){return""}default:return""}}function loadScript(r,e){switch(e){case"document":for(const e of r)if(0!==e.sources.length)if(e.dependencies.length>0){const s=(new Array).concat(...e.dependencies.map((e=>{const t=r.find((r=>r.name===e));return t?t.promises:Promise.resolve()})));Promise.all(e.promises=e.promises.concat(...s)).then((r=>t([...e.sources])),console.error).catch(console.error)}else e.promises=e.promises.concat(t([...e.sources]));break;case"ajax":for(const e of r)if(0!==e.sources.length)if(e.dependencies.length>0){const t=(new Array).concat(...e.dependencies.map((e=>{const t=r.find((r=>r.name===e));return t?t.promises:Promise.resolve()})));Promise.all(e.promises=e.promises.concat(...t)).then((r=>s([...e.sources])),console.error).catch(console.error)}else e.promises=e.promises.concat(s([...e.sources]));break;default:throw new Error('`renderer` is either be "document" or "ajax"')}function t(r){return new Promise(((e,s)=>{if(0===r.length)return void s("All sources failed.");const n=document.createElement("script");n.type="text/javascript",n.src=r.shift(),n.onload=()=>e(),n.onerror=()=>t(r).then(e).catch(s),document.head.appendChild(n)}))}function s(r){return new Promise(((e,s)=>{if(0===r.length)return void s("All sources failed.");const n=new XMLHttpRequest;n.open("GET",r.shift()),n.onreadystatechange=function(){n.readyState===XMLHttpRequest.DONE&&(200===n.status?(new Function(n.responseText)(),e()):t(r).then(e).catch(s))},n.send()}))}}class ScriptArray extends Array{constructor(...r){if(!Array.isArray(r))throw new Error("`array` isn't array");if(!r.every((r=>r instanceof ScriptObject)))throw new Error("Every item of `array` isn't an instance of ScriptObject");super(...r)}add(r){return this.push(r)}get names(){return this.map((r=>r.name))}}class ScriptObject{constructor(){this.name="",this.sources=[],this.dependencies=[],this.promises=[]}}const $ls=Object.assign((r=>{if("string"!=typeof r&&!Array.isArray(r))throw new Error("`data` should be either string or an object array.");if("string"==typeof r)switch(detectFormatXmlOrJson(r)){case"xml":$ls.xml(r);break;case"json":$ls.json(r);break;default:throw new Error("Unknown type")}else $ls.document(r)}),{xml:Object.assign((r=>{if("string"!=typeof r)throw new Error("data should be string");$ls.xml.document(r)}),{document(r){if("string"!=typeof r)throw new Error("data should be string");loadScript(validateXmlAsScriptArray(r),"document")},ajax(r){if("string"!=typeof r)throw new Error("data should be string");loadScript(validateXmlAsScriptArray(r),"ajax")}}),json:Object.assign((r=>{if("string"!=typeof r)throw new Error("data should be string");$ls.json.document(r)}),{document(r){if("string"!=typeof r)throw new Error("data should be string");loadScript(validateJsonAsScriptArray(r),"document")},ajax(r){if("string"!=typeof r)throw new Error("data should be string");loadScript(validateJsonAsScriptArray(r),"ajax")}}),document(r){if(!Array.isArray(r))throw new Error("data should be string");loadScript(validateAsScriptArray(r),"document")},ajax(r){if(!Array.isArray(r))throw new Error("data should be string");loadScript(validateAsScriptArray(r),"ajax")},url(r){const e=new XMLHttpRequest;e.open("GET",r),e.onreadystatechange=()=>e.readyState==XMLHttpRequest.DONE&&200==e.status&&$ls(e.responseText),e.send()}});function validateAsScriptArray(r){if(!Array.isArray(r))throw new Error("Root element should be an array");return new ScriptArray(...r.map((r=>{if("object"!=typeof r||Array.isArray(r))throw new Error("Items should be objects");const e=Object.keys(r).length;if(e<1||e>3)throw new Error("Items should have from 1 to 3 attributes");const{name:t,source:s,sources:n,dependency:o,dependencies:a}=r;if(!s&&!n)throw new Error("Attributes source(s) are required");if(s&&n)throw new Error("source and sources both are defined");return Object.assign(new ScriptObject,{name:t||"",sources:n||(s?[s]:[]),dependencies:a||(o?[o]:[])})})))}function validateJsonAsScriptArray(r){if("string"!=typeof r)throw new Error("`data` isn't string");return validateAsScriptArray(JSON.parse(r))}function validateXmlAsScriptArray(r){const e=(new DOMParser).parseFromString(r,"text/xml"),t="http://schemas.mubarrat.com/scripts-loader/";return validateAsScriptArray([...e.getElementsByTagNameNS(t,"script")].map((r=>({name:r.getAttribute("name"),sources:[...r.getElementsByTagNameNS(t,"source")].map((r=>r.textContent)),dependencies:[...r.getElementsByTagNameNS(t,"dependency")].map((r=>r.textContent))}))))}
//# sourceMappingURL=scripts-loader.min.js.map