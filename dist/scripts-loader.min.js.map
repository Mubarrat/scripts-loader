{"version":3,"file":"scripts-loader.min.js","names":["data","trim","charAt","DOMParser","parseFromString","_a","JSON","parse","_b","renderer","item","sources","length","dependencies","promises","Array","concat","map","dependencyName","dependentScript","find","script","name","Promise","resolve","all","then","_","loadScriptFromSource","console","error","catch","loadScriptFromAjax","Error","reject","scriptE","document","createElement","type","src","shift","onload","onerror","head","appendChild","XMLHttpRequest","xhr","readyState","DONE","status","Function","responseText","send","array","isArray","every","x","ScriptObject","super","add","scriptObject","this","push","names","s","constructor","assign","detectFormatXmlOrJson","$ls","xml","json","loadScript","validateXmlAsScriptArray","ajax","validateJsonAsScriptArray","validateAsScriptArray","url","open","onreadystatechange","ScriptArray","numAttributes","Object","keys","source","dependency","xmlDoc","namespace","getElementsByTagNameNS"],"sourceRoot":"./src/","sources":["./src/detectFormatXmlOrJson.ts","./src/loadScript.ts","./src/scriptArray.ts","./src/scriptObject.ts","./src/shortHand.ts","./src/validateAsScriptArray.ts","./src/validateJsonAsScriptArray.ts","./src/validateXmlAsScriptArray.ts"],"sourcesContent":["/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * An simple implementation that the data is xml or json.\r\n * @param data The data to be checked.\r\n * @returns If data is in xml, \"xml\". Or if data is in json, \"json\". Or an empty string will be returned.\r\n */\r\nfunction detectFormatXmlOrJson(data: string): \"xml\" | \"json\" | \"\" {\r\n\r\n  // Case the first char\r\n  switch ([data.trim().charAt(0), data.trim().charAt(1)]) {\r\n\r\n    // If starts with < and ends with >\r\n    case ['<', '>']:\r\n\r\n      // Surround with try/catch\r\n      try {\r\n\r\n        // If xml, try parsing with DOM parser\r\n        new DOMParser().parseFromString(data, \"text/xml\");\r\n\r\n        // Return xml data type and parsing successful\r\n        return \"xml\";\r\n      }\r\n\r\n      // This is not clearly xml, since exception thrown\r\n      catch {\r\n\r\n        // Return empty string\r\n        return \"\";\r\n      }\r\n\r\n    // If starts and ends with either {} or []\r\n    case ['{', '}']:\r\n    case ['[', ']']:\r\n\r\n      // Surround with try/catch\r\n      try {\r\n\r\n        // If json, try parsing\r\n        JSON.parse(data);\r\n\r\n        // Return json data type, parse successful\r\n        return \"json\";\r\n      }\r\n      \r\n      // This is not clearly json, since exception thrown\r\n      catch {\r\n\r\n        // Return empty string\r\n        return \"\";\r\n      }\r\n\r\n    // If anything else\r\n    default:\r\n\r\n      // Return empty string\r\n      return \"\";\r\n  }\r\n}","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * An function that loads script.\r\n * @param data The script array where scripts will be loaded.\r\n * @param renderer The renderer type can either be \"document\" or \"ajax\"\r\n */\r\nfunction loadScript(data: ScriptArray, renderer: \"document\" | \"ajax\") {\r\n  \r\n  // Switch the cases and set promises\r\n  switch (renderer) {\r\n    \r\n    // If renderer mode is document\r\n    case \"document\":\r\n\r\n      // Iterate item of given Script Array\r\n      for (const item of data) {\r\n\r\n        // Check id sources length is zero\r\n        if (item.sources.length === 0) {\r\n\r\n          // Skip if no sources provided\r\n          continue;\r\n        }\r\n        \r\n        // It has Additonal dependencies.\r\n        if (item.dependencies.length > 0) {\r\n\r\n          // Flatten the array.\r\n          const promises = new Array<Promise<void>>().concat(...item.dependencies.map(dependencyName => {\r\n\r\n            // Find the script object with the given dependency name\r\n            const dependentScript = data.find(script => script.name === dependencyName);\r\n\r\n            // If dependentScript, return it's promises or tell promise to resolve it.\r\n            return dependentScript ? dependentScript.promises : Promise.resolve();\r\n          }));\r\n\r\n          // Merge the existing promises with the promises from dependencies\r\n          // Do the promise all to load this script\r\n          Promise.all(item.promises = item.promises.concat(...promises))\r\n\r\n            // Succeed or rejected\r\n            .then(_ => loadScriptFromSource([...item.sources]), console.error)\r\n\r\n            // Any error, let's console error\r\n            .catch(console.error);\r\n        }\r\n        \r\n        // It has no dependencies\r\n        else {\r\n\r\n          // Use triple dots so that original source doesn't get replaced.\r\n          item.promises = item.promises.concat(loadScriptFromSource([...item.sources]));\r\n        }\r\n      }\r\n      break;\r\n      \r\n    // If renderer mode is ajax\r\n    case \"ajax\":\r\n\r\n      // Iterate item of given Script Array\r\n      for (const item of data) {\r\n\r\n        // Check id sources length is zero\r\n        if (item.sources.length === 0) {\r\n\r\n          // Skip if no sources provided\r\n          continue;\r\n        }\r\n        \r\n        // It has Additonal dependencies.\r\n        if (item.dependencies.length > 0) {\r\n\r\n          // Flatten the array.\r\n          const promises = new Array<Promise<void>>().concat(...item.dependencies.map(dependencyName => {\r\n\r\n            // Find the script object with the given dependency name\r\n            const dependentScript = data.find(script => script.name === dependencyName);\r\n\r\n            // If dependentScript, return it's promises or tell promise to resolve it.\r\n            return dependentScript ? dependentScript.promises : Promise.resolve();\r\n          }));\r\n\r\n          // Merge the existing promises with the promises from dependencies\r\n          // Do the promise all to load this script\r\n          Promise.all(item.promises = item.promises.concat(...promises))\r\n\r\n            // Succeed or rejected\r\n            .then(_ => loadScriptFromAjax([...item.sources]), console.error)\r\n\r\n            // Any error, let's console error\r\n            .catch(console.error);\r\n        }\r\n        \r\n        // It has no dependencies\r\n        else {\r\n\r\n          // Use triple dots so that original source doesn't get replaced.\r\n          item.promises = item.promises.concat(loadScriptFromAjax([...item.sources]));\r\n        }\r\n      }\r\n      break;\r\n\r\n    // The renderer mode is unknown\r\n    default:\r\n\r\n      // Throw an error\r\n      throw new Error('`renderer` is either be \"document\" or \"ajax\"');\r\n  }\r\n\r\n  // An inner method - for render mode is document\r\n  function loadScriptFromSource(sources: string[]): Promise<void> {\r\n\r\n    // Return new promise\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // Reject if all sources failed\r\n      if (sources.length === 0) {\r\n\r\n        reject('All sources failed.');\r\n        return;\r\n      }\r\n\r\n      // Create a new script element\r\n      const scriptE = document.createElement(\"script\");\r\n\r\n      // Set the type\r\n      scriptE.type = 'text/javascript';\r\n\r\n      // Set the source, shifting has no chance of unknown\r\n      scriptE.src = sources.shift() as string;\r\n\r\n      // Since loaded, resolve it\r\n      scriptE.onload = () => resolve();\r\n\r\n      // Since error, try loading fallback sources\r\n      scriptE.onerror = () => loadScriptFromSource(sources).then(resolve).catch(reject);\r\n\r\n      // Append to the child of head\r\n      document.head.appendChild(scriptE);\r\n    });\r\n  }\r\n\r\n  // Second inner method - for render mode is ajax\r\n  function loadScriptFromAjax(sources: string[]): Promise<void> {\r\n\r\n    // Return new promise\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // Reject if all sources failed\r\n      if (sources.length === 0) {\r\n\r\n        reject('All sources failed.');\r\n        return;\r\n      }\r\n\r\n      // Create a new xml http request\r\n      const xhr = new XMLHttpRequest();\r\n\r\n      // Open the request\r\n      xhr.open('GET', sources.shift() as string);\r\n\r\n      // Done\r\n      xhr.onreadystatechange = function () {\r\n\r\n        // If request is done\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n\r\n          // If xhr status is 200\r\n          if (xhr.status === 200) {\r\n\r\n            // Don't surrounding because our methods are correct and error happens in their js file\r\n\r\n            // Create a function and load the js\r\n            new Function(xhr.responseText)();\r\n\r\n            // Resolved\r\n            resolve();\r\n          }\r\n          \r\n          // Not ok - 200\r\n          else {\r\n\r\n            // Try loading fallbacks\r\n            loadScriptFromSource(sources).then(resolve).catch(reject)\r\n          }\r\n        }\r\n      };\r\n\r\n      // Send the request\r\n      xhr.send();\r\n    });\r\n  }\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * The script array class\r\n */\r\nclass ScriptArray extends Array<ScriptObject> {\r\n\r\n  /**\r\n   * The constructor of this script array.\r\n   * @param array The array of this class.\r\n   */\r\n  constructor(...array: ScriptObject[]) {\r\n\r\n    // Check if `array` isn't an array\r\n    if (!Array.isArray(array)) {\r\n\r\n      // Throw an error because it's not\r\n      throw new Error(\"`array` isn't array\");\r\n    }\r\n\r\n    // Check if items of `array` isn't ScriptObject\r\n    if (!array.every(x => x instanceof ScriptObject)) {\r\n\r\n      // Throw an error because it's not\r\n      throw new Error(\"Every item of `array` isn't an instance of ScriptObject\");\r\n    }\r\n    \r\n    // Assign array to this\r\n    super(...array);\r\n  }\r\n\r\n  /**\r\n   * Adds an script object.\r\n   * @param scriptObject The script object to be added.\r\n   * @returns Return the number of adding.\r\n   */\r\n  add(scriptObject: ScriptObject): number {\r\n\r\n    // Return the number\r\n    return this.push(scriptObject);\r\n  }\r\n\r\n  /**\r\n   * Get all names.\r\n   */\r\n  get names(): string[] {\r\n\r\n    // Return by mapping to the name\r\n    return this.map(s => s.name);\r\n  }\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * A class for script object.\r\n */\r\nclass ScriptObject {\r\n\r\n  /**\r\n   * A name for using in another dependency\r\n   */\r\n  name: string = \"\";\r\n\r\n  /**\r\n   * Sources for this object. Not-first sources are fallback.\r\n   */\r\n  sources: string[] = [];\r\n\r\n  /**\r\n   * Dependencies for this javaScript\r\n   */\r\n  dependencies: string[] = [];\r\n\r\n  /**\r\n   * An promise list. Merge promises here\r\n   */\r\n  promises: Promise<void>[] = [];\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * Define an shortname with objects.\r\n */\r\nconst $ls = Object.assign((data: string | {}[]) => {\r\n\r\n  // Let's check data is a string or an object array\r\n  if (typeof data !== \"string\" && !Array.isArray(data)) {\r\n\r\n    // Throw an error\r\n    throw new Error(\"`data` should be either string or an object array.\");\r\n  }\r\n\r\n  // If data is an string\r\n  if (typeof data === \"string\") {\r\n\r\n    // Switch case\r\n    switch (detectFormatXmlOrJson(data)) {\r\n\r\n      // If an xml type\r\n      case \"xml\":\r\n        \r\n        // Call Xml Helper Method\r\n        $ls.xml(data);\r\n        break;\r\n\r\n      // If an json type\r\n      case \"json\":\r\n        \r\n        // Call Json Helper Method\r\n        $ls.json(data);\r\n        break;\r\n\r\n      // If anything else\r\n      default:\r\n\r\n        // Throw an error\r\n        throw new Error(\"Unknown type\");\r\n    }\r\n  }\r\n\r\n  // Data is an array\r\n  else {\r\n\r\n    // Call the helper method\r\n    $ls.document(data);\r\n  }\r\n}, {\r\n\r\n  /**\r\n   * An xml helper function.\r\n   */\r\n  xml: Object.assign((data: string) => {\r\n\r\n    // If data isn't string\r\n    if (typeof data !== \"string\") {\r\n\r\n      // Throw an error\r\n      throw new Error(\"data should be string\");\r\n    }\r\n\r\n    // Load script\r\n    $ls.xml.document(data);\r\n  }, {\r\n\r\n    /**\r\n     * This is document injection rendering mode.\r\n     * @param data The xml data.\r\n     */\r\n    document(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateXmlAsScriptArray(data), \"document\");\r\n    },\r\n\r\n    /**\r\n     * This is ajax loading rendering mode.\r\n     * @param data The xml data.\r\n     */\r\n    ajax(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateXmlAsScriptArray(data), \"ajax\");\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * An json helper function\r\n   */\r\n  json: Object.assign((data: string) => {\r\n\r\n    // If data isn't string\r\n    if (typeof data !== \"string\") {\r\n\r\n      // Throw an error\r\n      throw new Error(\"data should be string\");\r\n    }\r\n\r\n    // Load script\r\n    $ls.json.document(data);\r\n  }, {\r\n\r\n    /**\r\n     * This is document injection rendering mode.\r\n     * @param data The json data.\r\n     */\r\n    document(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateJsonAsScriptArray(data), \"document\");\r\n    },\r\n\r\n    /**\r\n     * This is ajax loading rendering mode.\r\n     * @param data The json data.\r\n     */\r\n    ajax(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateJsonAsScriptArray(data), \"ajax\");\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * This is document injection rendering mode.\r\n   * @param data The script array.\r\n   */\r\n  document(data: {}[]) {\r\n\r\n    // If data isn't string\r\n    if (!Array.isArray(data)) {\r\n\r\n      // Throw an error\r\n      throw new Error(\"data should be string\");\r\n    }\r\n\r\n    // Load script\r\n    loadScript(validateAsScriptArray(data), \"document\");\r\n  },\r\n\r\n  /**\r\n   * This is ajax loading rendering mode.\r\n   * @param data The script array.\r\n   */\r\n  ajax(data: {}[]) {\r\n\r\n    // If data isn't string\r\n    if (!Array.isArray(data)) {\r\n\r\n      // Throw an error\r\n      throw new Error(\"data should be string\");\r\n    }\r\n\r\n    // Load script\r\n    loadScript(validateAsScriptArray(data), \"ajax\");\r\n  },\r\n\r\n  /**\r\n   * Load from url\r\n   * @param url The url where is data\r\n   */\r\n  url(url: string) {\r\n\r\n    // Create a new request\r\n    const xhr = new XMLHttpRequest;\r\n\r\n    // Open the request\r\n    xhr.open(\"GET\", url);\r\n\r\n    // Handle the request\r\n    xhr.onreadystatechange = () => xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200 && $ls(xhr.responseText);\r\n\r\n    // Send the request\r\n    xhr.send();\r\n  }\r\n});\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nfunction validateAsScriptArray(data: {}[]): ScriptArray {\r\n\r\n  // Check if the root element is an array\r\n  if (!Array.isArray(data)) {\r\n\r\n    // Throw an error because it's not\r\n    throw new Error('Root element should be an array');\r\n  }\r\n\r\n  // Check each item in the array\r\n  return new ScriptArray(...data.map(item => {\r\n\r\n    // Check if each item is an object\r\n    if (typeof item !== 'object' || Array.isArray(item)) {\r\n\r\n      // Throw an error because it's not\r\n      throw new Error('Items should be objects');\r\n    }\r\n\r\n    // Number of attributes\r\n    const numAttributes = Object.keys(item).length;\r\n\r\n    // Check if number of attributes is from 1 to 3.\r\n    if (numAttributes < 1 || numAttributes > 3) {\r\n\r\n      // Throw an error because it's not\r\n      throw new Error('Items should have from 1 to 3 attributes');\r\n    }\r\n\r\n    // Define and out\r\n    const { name, source, sources, dependency, dependencies } = item as any;\r\n\r\n    // Check for required attributes\r\n    if (!source && !sources) {\r\n\r\n      // Throw an error\r\n      throw new Error('Attributes source(s) are required');\r\n    }\r\n\r\n    // Check if `source` and `sources` both are defined\r\n    if (source && sources) {\r\n\r\n      // Throw an error\r\n      throw new Error('source and sources both are defined');\r\n    }\r\n\r\n    // Return script object with assigned properties\r\n    return Object.assign(new ScriptObject, {\r\n\r\n      // Return name\r\n      name: name || \"\",\r\n\r\n      // Return sources\r\n      sources: sources || (source ? [source] : []),\r\n\r\n      // Return additional dependencies\r\n      dependencies: dependencies || (dependency ? [dependency] : [])\r\n    });\r\n  }));\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * It validates json as script array.\r\n * @param data The data to be parsed.\r\n * @returns Returns the parsed script array.\r\n */\r\nfunction validateJsonAsScriptArray(data: string): ScriptArray {\r\n\r\n  // Check if data is an string\r\n  if (typeof data !== \"string\") {\r\n\r\n    // Throw an error because it's not\r\n    throw new Error(\"`data` isn't string\");\r\n  }\r\n\r\n  // Convert string to json and use another validate method to validate\r\n  return validateAsScriptArray(JSON.parse(data));\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * It validates xml string as script array.\r\n * @param data The data to be parsed.\r\n * @returns Returns an script array.\r\n */\r\nfunction validateXmlAsScriptArray(data: string): ScriptArray {\r\n  \r\n  // Initialize a new DOM Parser\r\n  const parser = new DOMParser();\r\n\r\n  // Parse xml\r\n  const xmlDoc = parser.parseFromString(data, \"text/xml\");\r\n\r\n  // Namespace\r\n  const namespace = \"http://schemas.mubarrat.com/scripts-loader/\";\r\n\r\n  // Mapping and return to main validator to validate\r\n  return validateAsScriptArray([...xmlDoc.getElementsByTagNameNS(namespace, \"script\")].map(x => {\r\n\r\n    // Returns\r\n    return {\r\n\r\n      // Define name\r\n      name: x.getAttribute(\"name\"),\r\n\r\n      // Define sources\r\n      sources: [...x.getElementsByTagNameNS(namespace, \"source\")].map(x => x.textContent),\r\n\r\n      // Define dependencies\r\n      dependencies: [...x.getElementsByTagNameNS(namespace, \"dependency\")].map(x => x.textContent)\r\n    }\r\n  }));\r\n}\r\n"],"mappings":"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"}