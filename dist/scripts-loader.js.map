{"version":3,"file":"scripts-loader.js","sourceRoot":"./src/","sources":["detectFormatXmlOrJson.ts","loadScript.ts","scriptArray.ts","scriptObject.ts","shortHand.ts","validateAsScriptArray.ts","validateJsonAsScriptArray.ts","validateXmlAsScriptArray.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * An simple implementation that the data is xml or json.\r\n * @param data The data to be checked.\r\n * @returns If data is in xml, \"xml\". Or if data is in json, \"json\". Or an empty string will be returned.\r\n */\r\nfunction detectFormatXmlOrJson(data: string): \"xml\" | \"json\" | \"\" {\r\n\r\n  // Case the first char\r\n  switch (data.trim().charAt(0)) {\r\n\r\n    // If starts with `<`\r\n    case '<':\r\n\r\n      // Surround with try/catch\r\n      try {\r\n\r\n        // If xml, try parsing with DOM parser\r\n        new DOMParser().parseFromString(data, \"text/xml\");\r\n\r\n        // Return xml data type and parsing successful\r\n        return \"xml\";\r\n      }\r\n\r\n      // This is not clearly xml, since exception thrown\r\n      catch {\r\n\r\n        // Return empty string\r\n        return \"\";\r\n      }\r\n\r\n    // If starts with `{` or `[`\r\n    case '{':\r\n    case '[':\r\n\r\n      // Surround with try/catch\r\n      try {\r\n\r\n        // If json, try parsing\r\n        JSON.parse(data);\r\n\r\n        // Return json data type, parse successful\r\n        return \"json\";\r\n      }\r\n      \r\n      // This is not clearly json, since exception thrown\r\n      catch {\r\n\r\n        // Return empty string\r\n        return \"\";\r\n      }\r\n\r\n    // If anything else\r\n    default:\r\n\r\n      // Return empty string\r\n      return \"\";\r\n  }\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * An function that loads script.\r\n * @param data The script array where scripts will be loaded.\r\n * @param renderer The renderer type can either be \"document\" or \"ajax\" or \"fetch\"\r\n */\r\nfunction loadScript(data: ScriptArray, renderer: \"document\" | \"ajax\" | \"fetch\") {\r\n  \r\n  // Switch the cases and set promises\r\n  switch (renderer) {\r\n    \r\n    // If renderer mode is document\r\n    case \"document\":\r\n\r\n      // Iterate item of given Script Array\r\n      for (const item of data) {\r\n\r\n        // Check id sources length is zero\r\n        if (item.sources.length === 0) {\r\n\r\n          // Skip if no sources provided\r\n          continue;\r\n        }\r\n        \r\n        // It has Additonal dependencies.\r\n        if (item.dependencies.length > 0) {\r\n\r\n          // Flatten the array.\r\n          const promises = new Array<Promise<void>>().concat(...item.dependencies.map(dependencyName => {\r\n\r\n            // Find the script object with the given dependency name\r\n            const dependentScript = data.find(script => script.name === dependencyName);\r\n\r\n            // If dependentScript, return it's promises or tell promise to resolve it.\r\n            return dependentScript ? dependentScript.promises : Promise.resolve();\r\n          }));\r\n\r\n          // Merge the existing promises with the promises from dependencies\r\n          // Do the promise all to load this script\r\n          Promise.all(item.promises = item.promises.concat(...promises))\r\n\r\n            // Succeed or rejected\r\n            .then(_ => loadScriptFromSource([...item.sources]), console.error)\r\n\r\n            // Any error, let's console error\r\n            .catch(console.error);\r\n        }\r\n        \r\n        // It has no dependencies\r\n        else {\r\n\r\n          // Use triple dots so that original source doesn't get replaced.\r\n          item.promises = item.promises.concat(loadScriptFromSource([...item.sources]));\r\n        }\r\n      }\r\n      break;\r\n      \r\n    // If renderer mode is ajax\r\n    case \"ajax\":\r\n\r\n      // Iterate item of given Script Array\r\n      for (const item of data) {\r\n\r\n        // Check id sources length is zero\r\n        if (item.sources.length === 0) {\r\n\r\n          // Skip if no sources provided\r\n          continue;\r\n        }\r\n        \r\n        // It has Additonal dependencies.\r\n        if (item.dependencies.length > 0) {\r\n\r\n          // Flatten the array.\r\n          const promises = new Array<Promise<void>>().concat(...item.dependencies.map(dependencyName => {\r\n\r\n            // Find the script object with the given dependency name\r\n            const dependentScript = data.find(script => script.name === dependencyName);\r\n\r\n            // If dependentScript, return it's promises or tell promise to resolve it.\r\n            return dependentScript ? dependentScript.promises : Promise.resolve();\r\n          }));\r\n\r\n          // Merge the existing promises with the promises from dependencies\r\n          // Do the promise all to load this script\r\n          Promise.all(item.promises = item.promises.concat(...promises))\r\n\r\n            // Succeed or rejected\r\n            .then(_ => loadScriptFromAjax([...item.sources]), console.error)\r\n\r\n            // Any error, let's console error\r\n            .catch(console.error);\r\n        }\r\n        \r\n        // It has no dependencies\r\n        else {\r\n\r\n          // Use triple dots so that original source doesn't get replaced.\r\n          item.promises = item.promises.concat(loadScriptFromAjax([...item.sources]));\r\n        }\r\n      }\r\n      break;\r\n      \r\n      // If renderer mode is fetch\r\n      case \"fetch\":\r\n  \r\n        // Iterate item of given Script Array\r\n        for (const item of data) {\r\n  \r\n          // Check id sources length is zero\r\n          if (item.sources.length === 0) {\r\n  \r\n            // Skip if no sources provided\r\n            continue;\r\n          }\r\n          \r\n          // It has Additonal dependencies.\r\n          if (item.dependencies.length > 0) {\r\n  \r\n            // Flatten the array.\r\n            const promises = new Array<Promise<void>>().concat(...item.dependencies.map(dependencyName => {\r\n  \r\n              // Find the script object with the given dependency name\r\n              const dependentScript = data.find(script => script.name === dependencyName);\r\n  \r\n              // If dependentScript, return it's promises or tell promise to resolve it.\r\n              return dependentScript ? dependentScript.promises : Promise.resolve();\r\n            }));\r\n  \r\n            // Merge the existing promises with the promises from dependencies\r\n            // Do the promise all to load this script\r\n            Promise.all(item.promises = item.promises.concat(...promises))\r\n  \r\n              // Succeed or rejected\r\n              .then(_ => loadScriptFromFetch([...item.sources]), console.error)\r\n  \r\n              // Any error, let's console error\r\n              .catch(console.error);\r\n          }\r\n          \r\n          // It has no dependencies\r\n          else {\r\n  \r\n            // Use triple dots so that original source doesn't get replaced.\r\n            item.promises = item.promises.concat(loadScriptFromFetch([...item.sources]));\r\n          }\r\n        }\r\n        break;\r\n\r\n    // The renderer mode is unknown\r\n    default:\r\n\r\n      // Throw an error\r\n      throw new Error('`renderer` is either be \"document\" or \"ajax\" or \"fetch\"');\r\n  }\r\n\r\n  // An inner method - for renderer mode is document\r\n  function loadScriptFromSource(sources: string[]): Promise<void> {\r\n\r\n    // Return new promise\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // Reject if all sources failed\r\n      if (sources.length === 0) {\r\n\r\n        reject('All sources failed.');\r\n        return;\r\n      }\r\n\r\n      // Create a new script element\r\n      const scriptE = document.createElement(\"script\");\r\n\r\n      // Set the type\r\n      scriptE.type = 'text/javascript';\r\n\r\n      // Set the source, shifting has no chance of unknown\r\n      scriptE.src = sources.shift() as string;\r\n\r\n      // Since loaded, resolve it\r\n      scriptE.onload = () => resolve();\r\n\r\n      // Since error, try loading fallback sources\r\n      scriptE.onerror = () => loadScriptFromSource(sources).then(resolve).catch(reject);\r\n\r\n      // Append to the child of head\r\n      document.head.appendChild(scriptE);\r\n    });\r\n  }\r\n\r\n  // Second inner method - for renderer mode is ajax\r\n  function loadScriptFromAjax(sources: string[]): Promise<void> {\r\n\r\n    // Return new promise\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // Reject if all sources failed\r\n      if (sources.length === 0) {\r\n\r\n        reject('All sources failed.');\r\n        return;\r\n      }\r\n\r\n      // Create a new xml http request\r\n      const xhr = new XMLHttpRequest();\r\n\r\n      // Open the request\r\n      xhr.open('GET', sources.shift() as string);\r\n\r\n      // Done\r\n      xhr.onreadystatechange = function () {\r\n\r\n        // If request is done\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n\r\n          // If xhr status is 200\r\n          if (xhr.status === 200) {\r\n\r\n            // Don't surrounding because our methods are correct and error happens in their js file\r\n\r\n            // Create a function and load the js\r\n            new Function(xhr.responseText)();\r\n\r\n            // Resolved\r\n            resolve();\r\n          }\r\n          \r\n          // Not ok - 200\r\n          else {\r\n\r\n            // Try loading fallbacks\r\n            loadScriptFromSource(sources).then(resolve).catch(reject)\r\n          }\r\n        }\r\n      };\r\n\r\n      // Send the request\r\n      xhr.send();\r\n    });\r\n  }\r\n\r\n  // Third inner method - for renderer mode is fetch\r\n  function loadScriptFromFetch(sources: string[]): Promise<void> {\r\n\r\n    // Return new promise\r\n    return new Promise((resolve, reject) => {\r\n\r\n      // Reject if all sources failed\r\n      if (sources.length === 0) {\r\n\r\n        reject('All sources failed.');\r\n        return;\r\n      }\r\n\r\n      fetch(sources.shift() as string)\r\n\r\n        // Succeeded\r\n        .then(resp => {\r\n\r\n          // Open the request and get by starting fetching\r\n          resp.text().then(data => {\r\n\r\n            // Surround with try/catch \r\n            try {\r\n\r\n              // Create a function and load the JavaScript\r\n              new Function(data)();\r\n            }\r\n\r\n            // Our functions are ok. The problem is in the source.\r\n            catch (ex) {\r\n\r\n              // Let's log the error\r\n              console.error(ex);\r\n            }\r\n\r\n            // Resolved\r\n            resolve();\r\n          });\r\n        })\r\n        \r\n        // Error occurred\r\n        .catch(err => {\r\n\r\n          // Try loading fallbacks\r\n          loadScriptFromSource(sources).then(resolve).catch(reject)\r\n        });\r\n    });\r\n  }\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * The script array class\r\n */\r\nclass ScriptArray extends Array<ScriptObject> {\r\n\r\n  /**\r\n   * The constructor of this script array.\r\n   * @param array The array of this class.\r\n   */\r\n  constructor(...array: ScriptObject[]) {\r\n\r\n    // Check if `array` isn't an array\r\n    if (!Array.isArray(array)) {\r\n\r\n      // Throw an error because it's not\r\n      throw new Error(\"`array` isn't array\");\r\n    }\r\n\r\n    // Check if items of `array` isn't ScriptObject\r\n    if (!array.every(x => x instanceof ScriptObject)) {\r\n\r\n      // Throw an error because it's not\r\n      throw new Error(\"Every item of `array` isn't an instance of ScriptObject\");\r\n    }\r\n    \r\n    // Assign array to this\r\n    super(...array);\r\n  }\r\n\r\n  /**\r\n   * Adds an script object.\r\n   * @param scriptObject The script object to be added.\r\n   * @returns Return the number of adding.\r\n   */\r\n  add(scriptObject: ScriptObject): number {\r\n\r\n    // Return the number\r\n    return this.push(scriptObject);\r\n  }\r\n\r\n  /**\r\n   * Get all names.\r\n   */\r\n  get names(): string[] {\r\n\r\n    // Return by mapping to the name\r\n    return this.map(s => s.name);\r\n  }\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * A class for script object.\r\n */\r\nclass ScriptObject {\r\n\r\n  /**\r\n   * A name for using in another dependency\r\n   */\r\n  name: string = \"\";\r\n\r\n  /**\r\n   * Sources for this object. Not-first sources are fallback.\r\n   */\r\n  sources: string[] = [];\r\n\r\n  /**\r\n   * Dependencies for this javaScript\r\n   */\r\n  dependencies: string[] = [];\r\n\r\n  /**\r\n   * An promise list. Merge promises here\r\n   */\r\n  promises: Promise<void>[] = [];\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * Define an shortname with objects.\r\n */\r\nconst $ls = Object.assign((data: string | {}[]) => {\r\n\r\n  // Let's check data is a string or an object array\r\n  if (typeof data !== \"string\" && !Array.isArray(data)) {\r\n\r\n    // Throw an error\r\n    throw new Error(\"`data` should be either string or an object array.\");\r\n  }\r\n\r\n  // If data is an string\r\n  if (typeof data === \"string\") {\r\n\r\n    // Switch case\r\n    switch (detectFormatXmlOrJson(data)) {\r\n\r\n      // If an xml type\r\n      case \"xml\":\r\n        \r\n        // Call Xml Helper Method\r\n        $ls.xml(data);\r\n        break;\r\n\r\n      // If an json type\r\n      case \"json\":\r\n        \r\n        // Call Json Helper Method\r\n        $ls.json(data);\r\n        break;\r\n\r\n      // If anything else\r\n      default:\r\n\r\n        // Throw an error\r\n        throw new Error(\"Unknown type\");\r\n    }\r\n  }\r\n\r\n  // Data is an array\r\n  else {\r\n\r\n    // Call the helper method\r\n    $ls.document(data);\r\n  }\r\n}, {\r\n\r\n  /**\r\n   * An xml helper function.\r\n   */\r\n  xml: Object.assign((data: string) => {\r\n\r\n    // If data isn't string\r\n    if (typeof data !== \"string\") {\r\n\r\n      // Throw an error\r\n      throw new Error(\"data should be string\");\r\n    }\r\n\r\n    // Load script\r\n    $ls.xml.document(data);\r\n  }, {\r\n\r\n    /**\r\n     * This is document injection rendering mode.\r\n     * @param data The xml data.\r\n     */\r\n    document(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateXmlAsScriptArray(data), \"document\");\r\n    },\r\n\r\n    /**\r\n     * This is ajax loading rendering mode.\r\n     * @param data The xml data.\r\n     */\r\n    ajax(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateXmlAsScriptArray(data), \"ajax\");\r\n    },\r\n\r\n    /**\r\n     * This is fetching rendering mode.\r\n     * @param data The xml data.\r\n     */\r\n    fetch(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateXmlAsScriptArray(data), \"fetch\");\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * An json helper function\r\n   */\r\n  json: Object.assign((data: string) => {\r\n\r\n    // If data isn't string\r\n    if (typeof data !== \"string\") {\r\n\r\n      // Throw an error\r\n      throw new Error(\"data should be string\");\r\n    }\r\n\r\n    // Load script\r\n    $ls.json.document(data);\r\n  }, {\r\n\r\n    /**\r\n     * This is document injection rendering mode.\r\n     * @param data The json data.\r\n     */\r\n    document(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateJsonAsScriptArray(data), \"document\");\r\n    },\r\n\r\n    /**\r\n     * This is ajax loading rendering mode.\r\n     * @param data The json data.\r\n     */\r\n    ajax(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateJsonAsScriptArray(data), \"ajax\");\r\n    },\r\n\r\n    /**\r\n     * This is fetching rendering mode.\r\n     * @param data The json data.\r\n     */\r\n    fetch(data: string) {\r\n\r\n      // If data isn't string\r\n      if (typeof data !== \"string\") {\r\n\r\n        // Throw an error\r\n        throw new Error(\"data should be string\");\r\n      }\r\n\r\n      // Load script\r\n      loadScript(validateJsonAsScriptArray(data), \"fetch\");\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * This is document injection rendering mode.\r\n   * @param data The script array.\r\n   */\r\n  document(data: string | {}[]) {\r\n\r\n    // Let's check data is a string or an object array\r\n    if (typeof data !== \"string\" && !Array.isArray(data)) {\r\n\r\n      // Throw an error\r\n      throw new Error(\"`data` should be either string or an object array.\");\r\n    }\r\n\r\n    // If data is an string\r\n    if (typeof data === \"string\") {\r\n\r\n      // Switch case\r\n      switch (detectFormatXmlOrJson(data)) {\r\n\r\n        // If an xml type\r\n        case \"xml\":\r\n          \r\n          // Call Xml Helper Method\r\n          $ls.xml.document(data);\r\n          break;\r\n\r\n        // If an json type\r\n        case \"json\":\r\n          \r\n          // Call Json Helper Method\r\n          $ls.json.document(data);\r\n          break;\r\n\r\n        // If anything else\r\n        default:\r\n\r\n          // Throw an error\r\n          throw new Error(\"Unknown type\");\r\n      }\r\n    }\r\n\r\n    // Data is an array\r\n    else {\r\n\r\n      // Load script\r\n      loadScript(validateAsScriptArray(data), \"document\");\r\n    }\r\n  },\r\n\r\n  /**\r\n   * This is ajax loading rendering mode.\r\n   * @param data The script array.\r\n   */\r\n  ajax(data: string | {}[]) {\r\n\r\n    // Let's check data is a string or an object array\r\n    if (typeof data !== \"string\" && !Array.isArray(data)) {\r\n\r\n      // Throw an error\r\n      throw new Error(\"`data` should be either string or an object array.\");\r\n    }\r\n\r\n    // If data is an string\r\n    if (typeof data === \"string\") {\r\n\r\n      // Switch case\r\n      switch (detectFormatXmlOrJson(data)) {\r\n\r\n        // If an xml type\r\n        case \"xml\":\r\n          \r\n          // Call Xml Helper Method\r\n          $ls.xml.ajax(data);\r\n          break;\r\n\r\n        // If an json type\r\n        case \"json\":\r\n          \r\n          // Call Json Helper Method\r\n          $ls.json.ajax(data);\r\n          break;\r\n\r\n        // If anything else\r\n        default:\r\n\r\n          // Throw an error\r\n          throw new Error(\"Unknown type\");\r\n      }\r\n    }\r\n\r\n    // Data is an array\r\n    else {\r\n\r\n      // Load script\r\n      loadScript(validateAsScriptArray(data), \"ajax\");\r\n    }\r\n  },\r\n\r\n  /**\r\n   * This is fetching rendering mode.\r\n   * @param data The script array.\r\n   */\r\n  fetch(data: string | {}[]) {\r\n\r\n    // Let's check data is a string or an object array\r\n    if (typeof data !== \"string\" && !Array.isArray(data)) {\r\n\r\n      // Throw an error\r\n      throw new Error(\"`data` should be either string or an object array.\");\r\n    }\r\n\r\n    // If data is an string\r\n    if (typeof data === \"string\") {\r\n\r\n      // Switch case\r\n      switch (detectFormatXmlOrJson(data)) {\r\n\r\n        // If an xml type\r\n        case \"xml\":\r\n          \r\n          // Call Xml Helper Method\r\n          $ls.xml.fetch(data);\r\n          break;\r\n\r\n        // If an json type\r\n        case \"json\":\r\n          \r\n          // Call Json Helper Method\r\n          $ls.json.fetch(data);\r\n          break;\r\n\r\n        // If anything else\r\n        default:\r\n\r\n          // Throw an error\r\n          throw new Error(\"Unknown type\");\r\n      }\r\n    }\r\n\r\n    // Data is an array\r\n    else {\r\n\r\n      // Load script\r\n      loadScript(validateAsScriptArray(data), \"fetch\");\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Load from url\r\n   * @param url The url where is data\r\n   * @param mode The loading mode\r\n   */\r\n  url: Object.assign((url: string, mode: \"ajax\" | \"fetch\" = \"fetch\") => {\r\n\r\n    // If url isn't striing\r\n    if (typeof url !== \"string\") {\r\n\r\n      // Let's throw an error\r\n      throw new Error(\"url must be string\");\r\n    }\r\n\r\n    // If mode is neither \"ajax\" nor \"fetch\"\r\n    if (mode != \"ajax\" && mode != \"fetch\") {\r\n\r\n      // Let's throw an error\r\n      throw new Error(`mode must be either \"ajax\" or \"fetch\"`);\r\n    }\r\n\r\n    // Let's call helpers\r\n    $ls.url.document(url, mode);\r\n  }, {\r\n\r\n    /**\r\n     * This is document injection rendering mode from url.\r\n     * @param url The url where is data\r\n     * @param mode The loading mode\r\n     */\r\n    async document(url: string, mode: \"ajax\" | \"fetch\" = \"fetch\") {\r\n\r\n      // Switch between cases\r\n      switch (mode) {\r\n\r\n        // If mode is ajax\r\n        case \"ajax\":\r\n  \r\n          // Create a new request\r\n          const xhr = new XMLHttpRequest;\r\n  \r\n          // Open the request\r\n          xhr.open(\"GET\", url);\r\n  \r\n          // Handle the request\r\n          xhr.onreadystatechange = () => xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200 && $ls.document(xhr.responseText);\r\n  \r\n          // Send the request\r\n          xhr.send();\r\n          break;\r\n  \r\n        // If mode is fetch\r\n        case \"fetch\":\r\n            \r\n          // Start fetching\r\n          fetch(url)\r\n\r\n            // Then read the text\r\n            .then(response => {\r\n\r\n              // Get the response by creating a fetch request\r\n              return response.text();\r\n            })\r\n\r\n            // Then load the data\r\n            .then(data => {\r\n\r\n              // Execute\r\n              return $ls.document(data);\r\n            })\r\n          break;\r\n  \r\n        // If mode is anything else\r\n        default:\r\n  \r\n          // Let's throw an error\r\n          throw new Error(`Loading mode can either be \"ajax\" or \"fetch\"`)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * This is document injection rendering mode from url.\r\n     * @param url The url where is data\r\n     * @param mode The loading mode\r\n     */\r\n    async ajax(url: string, mode: \"ajax\" | \"fetch\" = \"fetch\") {\r\n\r\n      // Switch between cases\r\n      switch (mode) {\r\n\r\n        // If mode is ajax\r\n        case \"ajax\":\r\n  \r\n          // Create a new request\r\n          const xhr = new XMLHttpRequest;\r\n  \r\n          // Open the request\r\n          xhr.open(\"GET\", url);\r\n  \r\n          // Handle the request\r\n          xhr.onreadystatechange = () => xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200 && $ls.ajax(xhr.responseText);\r\n  \r\n          // Send the request\r\n          xhr.send();\r\n          break;\r\n  \r\n        // If mode is fetch\r\n        case \"fetch\":\r\n            \r\n          // Start fetching\r\n          fetch(url)\r\n\r\n            // Then read the text\r\n            .then(response => {\r\n\r\n              // Get the response by creating a fetch request\r\n              return response.text();\r\n            })\r\n\r\n            // Then load the data\r\n            .then(data => {\r\n\r\n              // Execute\r\n              return $ls.ajax(data);\r\n            })\r\n          break;\r\n  \r\n        // If mode is anything else\r\n        default:\r\n  \r\n          // Let's throw an error\r\n          throw new Error(`Loading mode can either be \"ajax\" or \"fetch\"`)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * This is document injection rendering mode from url.\r\n     * @param url The url where is data\r\n     * @param mode The loading mode\r\n     */\r\n    fetch(url: string, mode: \"ajax\" | \"fetch\" = \"fetch\") {\r\n\r\n      // Switch between cases\r\n      switch (mode) {\r\n\r\n        // If mode is ajax\r\n        case \"ajax\":\r\n  \r\n          // Create a new request\r\n          const xhr = new XMLHttpRequest;\r\n  \r\n          // Open the request\r\n          xhr.open(\"GET\", url);\r\n  \r\n          // Handle the request\r\n          xhr.onreadystatechange = () => xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200 && $ls.fetch(xhr.responseText);\r\n  \r\n          // Send the request\r\n          xhr.send();\r\n          break;\r\n  \r\n        // If mode is fetch\r\n        case \"fetch\":\r\n            \r\n          // Start fetching\r\n          fetch(url)\r\n\r\n            // Then read the text\r\n            .then(response => {\r\n\r\n              // Get the response by creating a fetch request\r\n              return response.text();\r\n            })\r\n\r\n            // Then load the data\r\n            .then(data => {\r\n\r\n              // Execute\r\n              return $ls.fetch(data);\r\n            })\r\n          break;\r\n  \r\n        // If mode is anything else\r\n        default:\r\n  \r\n          // Let's throw an error\r\n          throw new Error(`Loading mode can either be \"ajax\" or \"fetch\"`)\r\n      }\r\n    }\r\n  })\r\n});\r\n\r\n/*\r\nThe following code section defines a utility named $ls, facilitating the\r\nhandling of both strings and arrays of objects. This utility employs a\r\nstructure that accommodates multiple data formats, such as XML and JSON, and\r\ntheir respective rendering modes: document injection, AJAX loading, and\r\nfetching.\r\n\r\nThe initial function checks whether the input is a string or an array of\r\nobjects. If it's a string, it's further processed based on its format: XML or\r\nJSON. Subsequently, corresponding methods (xml or json) are invoked based on\r\nthe detected format. If the input is an array of objects, it calls the\r\n'document' method.\r\n\r\nThe 'xml' and 'json' methods within this utility serve as helpers. They contain\r\nthree rendering modes: document injection, AJAX loading, and fetching. Each\r\nrendering mode checks for the data type, performs necessary validations, and\r\nthen proceeds to load the script accordingly.\r\n\r\nAdditionally, the utility provides three methods - document, ajax, and fetch -\r\nto process script arrays. These methods check the input type, detect the format\r\n(XML or JSON), and handle the loading of the script accordingly.\r\n\r\nThere's also a 'url' method that accepts a URL and a loading mode ('ajax' or\r\n'fetch'). This method, in turn, employs the corresponding loading method to\r\nfetch data from the URL and subsequently call the relevant processing method\r\n('document', 'ajax', or 'fetch') based on the obtained data type and mode.\r\n\r\nDespite the current implementation appearing extensive, it has been consciously\r\ndesigned to provide comprehensive support for multiple data formats and various\r\nloading modes. The verbosity of the code is intended to ensure readability,\r\nmaintainability, and comprehensive handling of different data types and loading\r\nscenarios.\r\n\r\nWhat if this short hand didn't ever be made?\r\n*/\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nfunction validateAsScriptArray(data: {}[]): ScriptArray {\r\n\r\n  // Check if the root element is an array\r\n  if (!Array.isArray(data)) {\r\n\r\n    // Throw an error because it's not\r\n    throw new Error('Root element should be an array');\r\n  }\r\n\r\n  // Check each item in the array\r\n  return new ScriptArray(...data.map(item => {\r\n\r\n    // Check if each item is an object\r\n    if (typeof item !== 'object' || Array.isArray(item)) {\r\n\r\n      // Throw an error because it's not\r\n      throw new Error('Items should be objects');\r\n    }\r\n\r\n    // Number of attributes\r\n    const numAttributes = Object.keys(item).length;\r\n\r\n    // Check if number of attributes is from 1 to 3.\r\n    if (numAttributes < 1 || numAttributes > 3) {\r\n\r\n      // Throw an error because it's not\r\n      throw new Error('Items should have from 1 to 3 attributes');\r\n    }\r\n\r\n    // Define and out\r\n    const { name, source, sources, dependency, dependencies } = item as any;\r\n\r\n    // Check for required attributes\r\n    if (!source && !sources) {\r\n\r\n      // Throw an error\r\n      throw new Error('Attributes source(s) are required');\r\n    }\r\n\r\n    // Check if `source` and `sources` both are defined\r\n    if (source && sources) {\r\n\r\n      // Throw an error\r\n      throw new Error('source and sources both are defined');\r\n    }\r\n\r\n    // Return script object with assigned properties\r\n    return Object.assign(new ScriptObject, {\r\n\r\n      // Return name\r\n      name: name || \"\",\r\n\r\n      // Return sources\r\n      sources: sources || (source ? [source] : []),\r\n\r\n      // Return additional dependencies\r\n      dependencies: dependencies || (dependency ? [dependency] : [])\r\n    });\r\n  }));\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * It validates json as script array.\r\n * @param data The data to be parsed.\r\n * @returns Returns the parsed script array.\r\n */\r\nfunction validateJsonAsScriptArray(data: string): ScriptArray {\r\n\r\n  // Check if data is an string\r\n  if (typeof data !== \"string\") {\r\n\r\n    // Throw an error because it's not\r\n    throw new Error(\"`data` isn't string\");\r\n  }\r\n\r\n  // Convert string to json and use another validate method to validate\r\n  return validateAsScriptArray(JSON.parse(data));\r\n}\r\n","/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Mubarrat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * It validates xml string as script array.\r\n * @param data The data to be parsed.\r\n * @returns Returns an script array.\r\n */\r\nfunction validateXmlAsScriptArray(data: string): ScriptArray {\r\n  \r\n  // Initialize a new DOM Parser\r\n  const parser = new DOMParser();\r\n\r\n  // Parse xml\r\n  const xmlDoc = parser.parseFromString(data, \"text/xml\");\r\n\r\n  // Namespace\r\n  const namespace = \"http://schemas.mubarrat.com/scripts-loader/\";\r\n\r\n  // Mapping and return to main validator to validate\r\n  return validateAsScriptArray([...xmlDoc.getElementsByTagNameNS(namespace, \"script\")].map(x => {\r\n\r\n    // Returns\r\n    return {\r\n\r\n      // Define name\r\n      name: x.getAttribute(\"name\"),\r\n\r\n      // Define sources\r\n      sources: [...x.getElementsByTagNameNS(namespace, \"source\")].map(x => x.textContent),\r\n\r\n      // Define dependencies\r\n      dependencies: [...x.getElementsByTagNameNS(namespace, \"dependency\")].map(x => x.textContent)\r\n    }\r\n  }));\r\n}\r\n"]}